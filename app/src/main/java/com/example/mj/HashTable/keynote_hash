
Hash Table的添加、搜索、删除操作过程：

1、利用 Hash函数(散列函数)生成key对应的 index; 【O(1)复杂度的】
2、根据 index 定位数组中的元素；【O(1)级别】

----------------------------------------------------------------

特性：
1、hash table是【空间换时间】的典型应用；

----------------------------------------------------------------

Hash冲突：
1、两个不同的key,经过hash 函数计算的结果一样；
2、key1 != key2; hash(key1) = hash(key2);

冲突解决：
1、开放定址法：按照一定的规则向其他地址探测，直到找到空桶；
  -- 线性探测
  -- 平方探测：1^2、2^2、3^2
2、再Hash法
  -- 设计多个hash函数
3、链地址法：
  -- 通过链表将同一index的元素链接起来；

----------------------------------------------------------------

JDK1.8的哈希冲突解决方案：
1、默认使用【单链表】将元素串起来；
2、在添加元素是，可能会由单向链表转为红黑树来存储元素
  -- 当哈希表容量>=64 且单向链表的节点数量大于8时，将使用红黑树存储
  -- 当红黑树数量少到一定程度时，又会转为单向链表；

----------------------------------------------------------------

哈希函数：
哈希表中哈希函数实现步骤：
1、先生成key的hash值（必须为整数）
2、让key的hash值与[数组大小]进行相关运算，得到对应的索引；

为了提高效率，可以使用【&】位运算代替【%】运算，【前提：将数组的长度设计的2^n个】

2^n                     2^n-1
10    2^1               01      2^1-1
100   2^2               011     2^2-1
1000  2^3               0111    2^3-1
10000 2^4               01111   2^4-1
如果数组长度不是2^n,&运算后还是index本身；

良好的哈希函数标准：
1、哈希值比较均匀分布 -> 减少哈希冲突次数 -> 提升哈希表性能；

----------------------------------------------------------------

如何生成key的哈希值：
1、key的常见种类：
整数、浮点数、字符串、自定义对象
2、不同的key，最终目标一致
-- 尽量让每个key的哈希值是唯一的；
-- 尽量让key的所有信息参与运算

* java中，HashMap的key 必须实现 HashCode的equals方法，也允许key为null；

** key为整数：
-- 直接使用整数作为哈希值；

** key浮点数：
-- 浮点数转化为整数：使用浮点数的二进制对应的整数值；
-- int code = Float.floatToIntBits(10.8); code就是对应的哈希值；

** Long
-- Java中需要Long转Int类型：(int)(value ^ (value >>> 32))
** Double
-- 1、先转为Long类型；int value = doubleToLongBits(value);
-- 2、转为32位；(int)(value ^ (value >>> 32))

**高32位和低32位混合计算出哈希值；^ 相同为0，不同为1；| 有一个为1就为1； &

** 字符串的哈希值

1、字符串是由若干个字符组成的；
-- 不如jack，由j，a，c, k组成；字符的本质就是整数；
-- 因此jack的hash值可以使用 j*n^3 + a*n^2 + c*n^1 + k*n^0 = [(j*n + a)*n + c]*n + k
-- JDK中n使用的是31：31是奇素数：JVM 将31*i = （i << 5）- i :::(乘除效率低)

** 自定义对象的哈希值：
-- 系统实现hashCode方法；
-- 特殊需求需要自己实现HashCode方法：
 --自定义对象都需要重写hashCode方法；
Map中的key要实现hashCode & equals方法；
equals方法是为了在出现hash冲突的时候，进行比较key是不是相等的；

----------------------------------------------------------------





























